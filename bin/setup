#!/usr/bin/env ruby
# frozen_string_literal: true

require 'pathname'
require 'fileutils'
require 'yaml'

include FileUtils

APP_ROOT = Pathname.new File.expand_path('../../', __FILE__)

PG_EXTENSIONS = %w(pg_similarity)

PG_CONFIG = YAML.load_file File.join(APP_ROOT, 'config', 'database.yml')
PG_DATABASES = PG_CONFIG.map { |_env, c| c['database'] }.compact.uniq

def run
  chdir APP_ROOT do
    puts '== Installing gem dependencies =='
    system 'bundle check' or system! 'bundle install'

    puts "\n== Installing front-end dependencies =="
    install_yarn_dependencies

    puts "\n== Checking PostgreSQL extensions =="
    check_postgres_extensions

    puts "\n== Preparing database =="
    system! 'bin/rails db:setup > /dev/null'

    puts "\n== Creating Elasticsearch indexes =="
    create_elasticsearch_indexes

    puts "\n== Removing old logs and tempfiles =="
    system! 'bin/rails log:clear tmp:clear'

    puts "\n== Done. =="
  end
end

def system!(*args)
  system(*args) || abort("\n== Command #{args} failed ==")
end

def install_yarn_dependencies
  chdir APP_ROOT.join('app', 'assets', 'gulp') do
    system 'yarn check &> /dev/null' or system! 'yarn install'
  end
end

def check_postgres_extensions
  ext_manager = PostgresExtensionManager.new
  if ext_manager.all_installed?
    puts "\nAll extensions are installed."
  else
    puts "\nFound missing PostgreSQL extensions."
    puts "\nYou will now be prompted for sudo access to perform automatic installation."
    puts "You may instead terminate the script and install the extensions manually.\n\n"

    ext_manager.install_all
  end
end

def create_elasticsearch_indexes
  system 'rails r', <<-EOC
  Rails.root.join('app', 'indexes')
    .entries.reject(&:directory?)
    .map { |e| e.basename('.rb').to_s.split('_').first.capitalize.constantize }
    .each { |m| m.__elasticsearch__.create_index! }
  EOC
end

class PostgresExtensionManager
  def all_installed?
    extension_map.all? { |(_ext, databases)| databases.all? { |(_db, has_ext)| has_ext } }
  end

  def install_all
    extension_map.each do |(ext, databases)|
      databases.select { |_, installed| !installed }.keys.each do |db|
        install_extension db, ext
      end
    end
  end

  private

  def extension_map
    @ext_map ||= PG_EXTENSIONS.reduce({}) do |ext_hash, ext|
      ext_hash[ext] = PG_DATABASES.reduce({}) do |db_hash, db|
        db_hash[db] = extension_installed? db, ext
        db_hash
      end
      ext_hash
    end
  end

  def extension_installed?(db, ext)
    system %{psql #{db} -qc "SELECT 1 FROM pg_extension WHERE extname = '#{ext}';" | grep -q 1}
  end

  def install_extension(db, ext)
    system %{sudo -u postgres psql #{db} -c "CREATE EXTENSION \"#{ext}\";"}
  end
end

run
